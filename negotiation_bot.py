# -*- coding: utf-8 -*-
"""negotiation_bot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IfDPG5ZX73ROHquqkybZbQ_WskEahuwR
"""

import google.generativeai as genai
from google.colab import userdata
import random
import re

# Access the API key from the secret you created
api_key = userdata.get('Gemin_API_Key')  # Replace 'Gemin_API_Key' with the actual name of your secret
genai.configure(api_key=api_key)
model = genai.GenerativeModel('gemini-pro')

# Enhanced product database with pricing flexibility
products = {
    "laptop": {
        "name": "QuantumX Pro",
        "description": "Ultra-lightweight laptop with AI-enhanced computing power and seamless cloud integration.",
        "list_price": 1350,
        "min_price": 1300,  # List price minus 50
    },
    "phone": {
        "name": "Zenith Edge",
        "description": "Next-gen smartphone with modular hardware design and cutting-edge AI camera technology.",
        "list_price": 950,
        "min_price": 900,  # List price minus 50
    },
    "tablet": {
        "name": "NimbusPad Pro",
        "description": "High-performance tablet with productivity-boosting AI and solar-powered energy efficiency.",
        "list_price": 800,
        "min_price": 750,  # List price minus 50
    }
}

# Conversation enhancers for better engagement
conversation_enhancers = [
    "virtual_demo", "personalized_use_case", "customer_success_story",
    "value_over_time_calculation", "competitive_comparison", "tailored_bundle_suggestion"
]

def get_ai_response(conversation_history, user_message):
    chat = model.start_chat(history=conversation_history)
    response = chat.send_message(user_message)
    return response.text

# Negotiation logic to give three chances for valid offers and end after the deal is complete
def concise_negotiation(product_id, user_input, conversation_history=[], user_profile={}, current_offer=None, low_offer_count=0):
    product = products[product_id]
    min_price = product['min_price']
    list_price = product['list_price']

    # A random conversation enhancer
    enhancer = random.choice(conversation_enhancers)

    # Extract the user's offer from input
    offer_match = re.search(r'\$?(\d+)', user_input)
    if offer_match:
        user_offer = int(offer_match.group(1))
    else:
        # Handle invalid inputs
        return {
            "ai_response": "I didn't catch a valid price. Could you please provide a valid offer?",
            "conversation_history": conversation_history,
            "enhancer_used": enhancer,
            "low_offer_count": low_offer_count
        }

    # If the user offers below the minimum price
    if user_offer < min_price:
        low_offer_count += 1
        if low_offer_count >= 3:
            # End the negotiation if the user proposes a low offer for the third time
            return {
                "ai_response": f"Unfortunately, ${user_offer} is below our minimum price of ${min_price}. Since this is your third consecutive low offer, we must end the negotiation.",
                "conversation_history": conversation_history,
                "enhancer_used": enhancer,
                "low_offer_count": low_offer_count
            }
        else:
            # Counteroffer after a low offer
            counter_offer = max(min_price, int((user_offer + min_price) / 2))
            return {
                "ai_response": f"${user_offer} is below our minimum price of ${min_price}, but I can offer ${counter_offer}. You have {3 - low_offer_count} more chances to make a valid offer.",
                "conversation_history": conversation_history,
                "enhancer_used": enhancer,
                "low_offer_count": low_offer_count,
                "current_offer": counter_offer
            }

    # Reset the low offer count if the user makes an acceptable offer
    low_offer_count = 0

    # Logic to handle acceptable offers
    if user_offer >= list_price:
        # If user offers at or above the list price, accept the deal and end negotiation
        return {
            "ai_response": f"Great! You've offered ${user_offer}, which is the listed price. The deal is done.",
            "conversation_history": conversation_history,
            "enhancer_used": enhancer,
            "low_offer_count": low_offer_count,
            "deal_complete": True  # Flag to indicate the deal is complete
        }

    elif current_offer is not None and user_offer >= current_offer:
        # If the user offers a price equal to or higher than the current offer, accept and end negotiation
        return {
            "ai_response": f"Thank you for your offer of ${user_offer}. I'm happy to accept that! The deal is complete.",
            "conversation_history": conversation_history,
            "enhancer_used": enhancer,
            "low_offer_count": low_offer_count,
            "deal_complete": True  # Flag to indicate the deal is complete
        }

    else:
        # The new counteroffer will be between the user's offer and the previous seller's counteroffer
        counter_offer = max(min_price, (user_offer + (current_offer or list_price)) // 2)

        ai_response = f"The {product['name']} is an excellent choice for you! After reviewing your offer, I can meet you at ${counter_offer}. Would that work for you?"

    # Update conversation history
    conversation_history.append({"role": "user", "parts": [f"Customer: {user_input}"]})
    conversation_history.append({"role": "model", "parts": [ai_response]})

    return {
        "ai_response": ai_response,
        "conversation_history": conversation_history,
        "enhancer_used": enhancer,
        "low_offer_count": low_offer_count,
        "current_offer": counter_offer
    }

def interactive_innovative_negotiation():
    print("I am Technox's Product Negotiation Assistant!")
    print("Available products: laptop (QuantumX Pro), phone (Zenith Edge), tablet (NimbusPad Pro)")
    product_id = input("Which product would you like to explore and negotiate for today? ").lower()

    if product_id not in products:
        print("I'm sorry, that product isn't in our lineup yet. Please choose from laptop, phone, or tablet.")
        return

    product = products[product_id]
    print(f"\nExcellent choice! Let's negotiate the price for {product['name']}. List price: ${product['list_price']}")

    # Collect user profile for personalization
    user_profile = {
        "occupation": input("To personalize your experience, could you tell me your occupation? "),
        "main_use": input("What's the primary use you have in mind for this device? "),
        "tech_savviness": input("On a scale of 1-10, how tech-savvy would you say you are? ")
    }

    conversation_history = []
    current_offer = None
    low_offer_count = 0

    while True:
        user_input = input("\nWhat is your price? (Type 'end' to finish): ").lower()
        if user_input == 'end':
            print("Thank you for exploring the future of technology with us. We hope to see you again soon!")
            break

        result = concise_negotiation(product_id, user_input, conversation_history, user_profile, current_offer, low_offer_count)

        print(f"\nAI Negotiator Zara: {result['ai_response']}")
        conversation_history = result['conversation_history']
        low_offer_count = result['low_offer_count']
        current_offer = result.get('current_offer', current_offer)  # Update the current offer after each negotiation step

        # End the negotiation if the deal is complete
        if result.get('deal_complete'):
            print("The negotiation has ended with the deal being successfully completed.")
            break

        print(f"\n[Debug: Conversation enhancer used: {result['enhancer_used']}]")

interactive_innovative_negotiation()